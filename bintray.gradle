apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

// load properties
Properties properties = new Properties()
properties.load(rootProject.file('local.properties').newDataInputStream())

// read properties
def bintrayUser = properties.getProperty("bintray.user")
def bintrayKey = properties.getProperty("bintray.key")
if (bintrayUser == null || bintrayKey == null) {
    bintrayUser = System.getenv("bintray_user")
    bintrayKey = System.getenv("bintray_key")
}

// Config
def developerId = getProperty("developer.id")
def developerName = getProperty("developer.name")
def developerEmail = getProperty("developer.email")
def bintrayRepo = getProperty("bintray.repo")
def bintrayName = getProperty("bintray.name")
def bintrayWebsite = getProperty("bintray.website")
def bintrayUserOrg = getProperty("bintray.userOrg")
def bintrayDesc = getProperty("bintray.desc")

def gitUrl = "${bintrayWebsite}.git"
def issuesUrl = "${bintrayWebsite}/issues"

// set the maven groupId and version
group = getProperty("bintray.groupId")
version = android.defaultConfig.versionName

// This generates POM.xml with proper parameters
install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name bintrayName
                description bintrayDesc
                url bintrayWebsite
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url bintrayWebsite
                }
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey

    // [Default: false] Whether to run this as dry-run, without deploying
    dryRun = false
    // [Default: false] Whether version should be auto published after an upload
    publish = true
    // [Default: false] Whether to override version artifacts already published
    override = false

    // Package configuration. The plugin will use the repo and name properties to check if the package already exists.
    // In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        // Mandatory parameters:
        repo = bintrayRepo
        name = bintrayName
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl

        // Optional parameters:
        // An optional organization name when the repo belongs to one of the user's orgs
        userOrg = bintrayUserOrg
        desc = bintrayDesc
        websiteUrl = bintrayWebsite
        issueTrackerUrl = issuesUrl

        // Optional version descriptor
        version {
            // Mandatory parameters:
            // Mandatory bintray logical version name
            name = this.version

            // Optional parameters:
            // Optional Version-specific description
            desc = bintrayDesc
            // Optional Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            released = new Date()
            vcsTag = 'v' + this.version
            // Optional version-level attributes
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
    configurations = ['archives']
}

// The following is the task of generating sources.jar and javadoc.jar

// This generates sources.jar
task sourcesJar(type: Jar) {
    // Specify the source code through the from function, which is the default source
    from android.sourceSets.main.java.srcDirs
    classifier = "sources"
}

// Set the Javadoc
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

// This generates javadoc.jar, dependsOn here means that this task will only start after the javadoc complete.
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = "javadoc"
}

artifacts {
    archives sourcesJar
    archives javadocJar
}